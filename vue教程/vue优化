一、webpack层面优化

CDN加载方式替换import方式
原理：
浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。
而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。
操作：
// 文件：./src/index.html
<script src="https://cdn.bootcss.com/vue/2.5.3/vue.min.js"></script>
<script src="https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js"></script>
<script src="https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"></script>
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>
<script src="https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js"></script>


图片base64转码
目的：图片转base64后，图片打包进dist/app.js中，随js一起加载，减少http请求次数。图片转成base64后，文件体积变大了大约1/3左右
注意：
文件的base64编码存储到了js文件中
vue-webpack模板的默认设置限制了转码的文件大小为10000B以下
静态文件目录中的所有文件不会被转码，也就是/static下的所有文件都不会被转码
如果所有图片均转码为base64，那么很容易造成存储base64的js文件过大，一方面会造成资源加载时间过长的白屏问题，
另一方面也会给js解释器带来非常大的负担，这样反而起不到优化的作用，而且会非常影响体验
如果你非要让所有图片转为base64，可以修改webpack中的url-loader配置


二、业务代码层面优化


事件销毁
 created() {
   addEventListener('click', this.click, false)
 },
 beforeDestroy() {
   removeEventListener('click', this.click, false)
 }



图片懒加载
原理：图片过多，优先加载可视区域内的图片

// 安装vue-lazyload插件
npm install vue-lazyload --save-dev

// main.js中引入并全局注册
import VueLazyload from 'vue-lazyload'

Vue.use(VueLazyload, {
    preLoad: 1.3,
    loading: require('@/assets/p/90_90.png'),
    attempt: 3，
    try: 2  //加载图片数量
})


路由懒加载
 const classify =
  {
    path: '/classify',
    name: 'classify',
    meta: { title: '分类' },
    redirect: '/classify/index',
    component: () => import('@/components/router'),
    children: [{
      path: 'index',
      name: 'classifyIndex',
      meta: { title: '分类' },
      component: () => import('@/view/classify/index')
    }, {
      path: 'list',
      name: 'classifyList',
      meta: { title: '分类' },
      component: () => import('@/view/classify/classListForItem')
    }]
  }
export default classify



三方件按需加载
babel-plugin-component按需引入 (以element-ui为例)
// 安装babel-plugin-component插件
npm install babel-plugin-component -D

// 修改.babelrc文件
{
 "plugins": [
   ["component", {
     "libraryName": "element-ui",
     "libraryDirectory": "lib",
     "styleLibraryName": "theme-chalk"
   }]
 ]
}

// main.js中按需引入
import Vue from 'vue';
import { Button, Select } from 'element-ui';

Vue.use(Button)
Vue.use(Select)



三、服务器端渲染 & 预渲染
















