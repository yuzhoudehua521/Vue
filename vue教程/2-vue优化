一、webpack层面优化

CDN加载方式替换import方式
原理：
浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。
而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。
操作：
// 文件：./src/index.html
<script src="https://cdn.bootcss.com/vue/2.5.3/vue.min.js"></script>
<script src="https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js"></script>
<script src="https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"></script>
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>
<script src="https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js"></script>


图片base64转码
目的：图片转base64后，图片打包进dist/app.js中，随js一起加载，减少http请求次数。图片转成base64后，文件体积变大了大约1/3左右
注意：
文件的base64编码存储到了js文件中
vue-webpack模板的默认设置限制了转码的文件大小为10000B以下
静态文件目录中的所有文件不会被转码，也就是/static下的所有文件都不会被转码
如果所有图片均转码为base64，那么很容易造成存储base64的js文件过大，一方面会造成资源加载时间过长的白屏问题，
另一方面也会给js解释器带来非常大的负担，这样反而起不到优化的作用，而且会非常影响体验
如果你非要让所有图片转为base64，可以修改webpack中的url-loader配置


二、业务代码层面优化

gzip压缩
在所有的web前端项目，静态资源基本都放在cdn上，gzip的压缩是非常必要的，它直接改变了js文件的大小，减少两到三倍。


事件销毁
 created() {
   addEventListener('click', this.click, false)
 },
 beforeDestroy() {
   removeEventListener('click', this.click, false)
 }



图片懒加载
原理：图片过多，优先加载可视区域内的图片
// 安装vue-lazyload插件
npm install vue-lazyload --save-dev

// main.js中引入并全局注册
import VueLazyload from 'vue-lazyload'

Vue.use(VueLazyload, {
    preLoad: 1.3,
    loading: require('@/assets/p/90_90.png'),
    attempt: 3，
    try: 2  //加载图片数量
})



路由组件进行懒加载
在路由配置文件里，这里是router.js里面引用组件。如果使用同步的方式加载组件，
在首屏加载时会对网络资源加载加载比较多，资源比较大，加载速度比较慢。所以设置路由懒加载，按需加载会加速首屏渲染。
 const classify =
  {
    path: '/classify',
    name: 'classify',
    meta: { title: '分类' },
    redirect: '/classify/index',
    component: () => import('@/components/router'),
    children: [{
      path: 'index',
      name: 'classifyIndex',
      meta: { title: '分类' },
      component: () => import('@/view/classify/index')
    }, {
      path: 'list',
      name: 'classifyList',
      meta: { title: '分类' },
      component: () => import('@/view/classify/classListForItem')
    }]
  }
export default classify



三方件按需加载
babel-plugin-component按需引入 (以element-ui为例)
// 安装babel-plugin-component插件
npm install babel-plugin-component -D

// 修改.babelrc文件
{
 "plugins": [
   ["component", {
     "libraryName": "element-ui",
     "libraryDirectory": "lib",
     "styleLibraryName": "theme-chalk"
   }]
 ]
}

// main.js中按需引入
import Vue from 'vue';
import { Button, Select } from 'element-ui';

Vue.use(Button)
Vue.use(Select)



三、服务器端渲染 & 预渲染


四、源码优化
v-if 和 v-show选择调用
v-show和v-if的区别是：v-if是懒加载，当状态为true时才会加载，并且为false时不会占用布局空间；
v-show是无论状态是true或者是false，都会进行渲染，并对布局占据空间对于在项目中，需要频繁调用，
不需要权限的显示隐藏，可以选择使用v-show，可以减少系统的切换开销。

为item设置唯一key值
在列表数据进行遍历v-for渲染时，需要为每一项item设置唯一key值，方便vuejs内部机制精准找到该条列表数据。
当state更新时，新的状态值和旧的状态值对比，较快地定位到diff。

细分vuejs组件
在项目开发过程之中，第一版本把所有的组件的布局写在一个组件中，当数据变更时，由于组件代码比较庞大
vuejs的数据驱动视图更新比较慢，造成渲染比较慢。造成比较差的体验效果。所以把组件细分，比如一个组件，
可以把整个组件细分成轮播组件、列表组件、分页组件等。

减少watch的数据
当组件某个数据变更后需要对应的state进行变更，就需要对另外的组件进行state进行变更。
可以使用watch监听相应的数据变更并绑定事件。当watch的数据比较小，性能消耗不明显。当数据变大，
系统会出现卡顿，所以减少watch的数据。其它不同的组件的state双向绑定，可以采用事件中央总线或者vuex进行数据的变更操作。

内容类系统的图片资源按需加载
对于内容类系统的图片按需加载，如果出现图片加载比较多，可以先使用v-lazy之类的懒加载库或者绑定鼠标的scroll事件，
滚动到可视区域先再对数据进行加载显示，减少系统加载的数据。

可以使用keep-alive，keep-alive是Vue提供的一个比较抽象的组件，用来对组件进行缓存，从而节省性能。

SSR(服务端渲染)
如果项目比较大，首屏无论怎么做优化，都出现闪屏或者一阵黑屏的情况。可以考虑使用SSR(服务端渲染)，
vuejs官方文档提供next.js很好的服务端解决方案，但是局限性就是目前仅支持Koa、express等Nodejs的后台框架，
需要webpack支持。目前自己了解的就是后端支持方面，vuejs的后端渲染支持php，其它的不太清楚。






























